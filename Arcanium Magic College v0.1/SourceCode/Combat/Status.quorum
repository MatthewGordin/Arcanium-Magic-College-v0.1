use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.System.File
use Libraries.Containers.Array

class Status
    
    text name = ""                  //status name
    integer statusID = 0            //the status's ID in the JSON list
    integer elementID = 7000000     //7 for damaging/healing, 6 for (de)buffing followed by elements
    integer baseDamage = 0          //base damage of this status off of the sourceAttack's damage
    integer turnCounter = 0         //number of turns remaining on this status
    number applicationChance = 0    //chance for this status to be inflicted
    number baseModifier = 0         //affects either damage or target's attack stat
    boolean isHealing = false       //true if the status effect heals over time, false for damaging over time
    Array<number> effectivenessStatModifiers //multipliers to lower/raise target's effectiveness stats

    /*When initialized the effectivenessStatModifiers array is given 
    6 undefined values, it also cannot grow larger or smaller*/
    on create
        effectivenessStatModifiers:SetSize(6)
        effectivenessStatModifiers:SetMaxSize(6)
        effectivenessStatModifiers:SetAutoResize(false)
    end

    /*Parse through the JSON to find a status effect with the given ID and use 
    that information to fill out the status effect's fields*/
    action FillStatus(integer ID)
        SetStatusID(ID)
        JavaScriptObjectNotation statuses
        File statusesList
        statusesList:SetPath("Assets\Attacks\StatusEffects.json")
        statuses:Read(statusesList)
        JavaScriptObjectNotation statusData = statuses:GetObject("statusEffects")

        JavaScriptObjectNotation currentStatus
        integer i = 0
        boolean found = false
        repeat while (i < statusData:GetSize() and not found)
            currentStatus = statusData:Get(i)
            if (currentStatus:GetValue("statusID") = statusID:GetText())
                found = true
            else
                i = i + 1
            end
        end

        if (not found)
            output "Temporary Error: status effect not found"
        else
            SetElementID(currentStatus:GetValue("elementID"):ParseInteger())
            SetName(currentStatus:GetValue("name"))
            SetBaseModifier(currentStatus:GetValue("modifier"):ParseNumber())
            SetApplicationChance(currentStatus:GetValue("applicationChance"):ParseNumber())
            SetIsHealing(currentStatus:GetValue("isHealing"):ParseBoolean())
            SetTurnCounter(currentStatus:GetValue("turnsAffected"):ParseInteger())

            statusData = currentStatus:GetObject("effectivenessStatModifiers")
            i = 0
            repeat while (i < statusData:GetSize())
                SetEffectivenessStatModifiersAtPosition(i, 
                 statusData:Get(i):GetValue():ParseNumber())
                i = i + 1
            end
        end
    end

    action DecrementTurnCounter()
        turnCounter = turnCounter - 1
    end

/*******************************************************************************
                    Getters and Setters Below This Point
*******************************************************************************/

    action SetName(text newName)
        name = newName
    end

    action GetName() returns text
        return name
    end

    action SetStatusID(integer newStatusID)
        statusID = newStatusID
    end

    action GetStatusID() returns integer
        return statusID
    end

    action SetElementID(integer newElementID)
        elementID = newElementID
    end

    action GetElementID() returns integer
        return elementID
    end

    action SetBaseDamage(integer newBaseDamage)
        baseDamage = newBaseDamage
    end

    action GetBaseDamage() returns integer
        return baseDamage
    end

    action SetTurnCounter(integer newTurnCounter)
        turnCounter = newTurnCounter
    end

    action GetTurnCounter() returns integer
        return turnCounter
    end

    action SetApplicationChance(number newApplicationChance)
        applicationChance = newApplicationChance
    end

    action GetApplicationChance() returns number
        return applicationChance
    end

    action SetBaseModifier(number newBaseModifier)
        baseModifier = newBaseModifier
    end

    action GetBaseModifier() returns number
        return baseModifier
    end

    action SetIsHealing(boolean newIsHealing)
        isHealing = newIsHealing
    end

    action GetIsHealing() returns boolean
        return isHealing
    end

    action SetEffectivenessStatModifiersAtPosition(integer position, number newModifier)
        effectivenessStatModifiers:Set(position, newModifier)
    end

    action GetEffectivenessStatModifiersAtPosition(integer position) returns number
        return effectivenessStatModifiers:Get(position)
    end
end